# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chatting_pb2 as chatting__pb2


class ChattingStub(object):
    """python -m grpc_tools.protoc -I./ --python_out=. --grpc_python_out=. chatting.proto

    Client
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckClient = channel.unary_stream(
                '/Chatting/CheckClient',
                request_serializer=chatting__pb2.Empty.SerializeToString,
                response_deserializer=chatting__pb2.Time.FromString,
                )
        self.MakeChannel = channel.unary_unary(
                '/Chatting/MakeChannel',
                request_serializer=chatting__pb2.GiveUserAndChannel.SerializeToString,
                response_deserializer=chatting__pb2.SuccessOrNot.FromString,
                )
        self.ShowChannel = channel.unary_unary(
                '/Chatting/ShowChannel',
                request_serializer=chatting__pb2.Empty.SerializeToString,
                response_deserializer=chatting__pb2.ChannelList.FromString,
                )
        self.EnterChannel = channel.unary_unary(
                '/Chatting/EnterChannel',
                request_serializer=chatting__pb2.GiveUserAndChannel.SerializeToString,
                response_deserializer=chatting__pb2.SuccessOrNot.FromString,
                )
        self.ExitChannel = channel.unary_unary(
                '/Chatting/ExitChannel',
                request_serializer=chatting__pb2.GiveUserAndChannel.SerializeToString,
                response_deserializer=chatting__pb2.SuccessOrNot.FromString,
                )
        self.ShowChannelPeople = channel.unary_unary(
                '/Chatting/ShowChannelPeople',
                request_serializer=chatting__pb2.ShowPeopleRequest.SerializeToString,
                response_deserializer=chatting__pb2.ChannelPeople.FromString,
                )
        self.ChatStream = channel.unary_stream(
                '/Chatting/ChatStream',
                request_serializer=chatting__pb2.Empty.SerializeToString,
                response_deserializer=chatting__pb2.ChatRequest.FromString,
                )
        self.SendChat = channel.unary_unary(
                '/Chatting/SendChat',
                request_serializer=chatting__pb2.ChatRequest.SerializeToString,
                response_deserializer=chatting__pb2.Empty.FromString,
                )


class ChattingServicer(object):
    """python -m grpc_tools.protoc -I./ --python_out=. --grpc_python_out=. chatting.proto

    Client
    """

    def CheckClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeChannel(self, request, context):
        """Channel 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnterChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExitChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowChannelPeople(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatStream(self, request, context):
        """Chatting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChattingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckClient': grpc.unary_stream_rpc_method_handler(
                    servicer.CheckClient,
                    request_deserializer=chatting__pb2.Empty.FromString,
                    response_serializer=chatting__pb2.Time.SerializeToString,
            ),
            'MakeChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeChannel,
                    request_deserializer=chatting__pb2.GiveUserAndChannel.FromString,
                    response_serializer=chatting__pb2.SuccessOrNot.SerializeToString,
            ),
            'ShowChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowChannel,
                    request_deserializer=chatting__pb2.Empty.FromString,
                    response_serializer=chatting__pb2.ChannelList.SerializeToString,
            ),
            'EnterChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnterChannel,
                    request_deserializer=chatting__pb2.GiveUserAndChannel.FromString,
                    response_serializer=chatting__pb2.SuccessOrNot.SerializeToString,
            ),
            'ExitChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ExitChannel,
                    request_deserializer=chatting__pb2.GiveUserAndChannel.FromString,
                    response_serializer=chatting__pb2.SuccessOrNot.SerializeToString,
            ),
            'ShowChannelPeople': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowChannelPeople,
                    request_deserializer=chatting__pb2.ShowPeopleRequest.FromString,
                    response_serializer=chatting__pb2.ChannelPeople.SerializeToString,
            ),
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=chatting__pb2.Empty.FromString,
                    response_serializer=chatting__pb2.ChatRequest.SerializeToString,
            ),
            'SendChat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChat,
                    request_deserializer=chatting__pb2.ChatRequest.FromString,
                    response_serializer=chatting__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Chatting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chatting(object):
    """python -m grpc_tools.protoc -I./ --python_out=. --grpc_python_out=. chatting.proto

    Client
    """

    @staticmethod
    def CheckClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Chatting/CheckClient',
            chatting__pb2.Empty.SerializeToString,
            chatting__pb2.Time.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/MakeChannel',
            chatting__pb2.GiveUserAndChannel.SerializeToString,
            chatting__pb2.SuccessOrNot.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/ShowChannel',
            chatting__pb2.Empty.SerializeToString,
            chatting__pb2.ChannelList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnterChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/EnterChannel',
            chatting__pb2.GiveUserAndChannel.SerializeToString,
            chatting__pb2.SuccessOrNot.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExitChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/ExitChannel',
            chatting__pb2.GiveUserAndChannel.SerializeToString,
            chatting__pb2.SuccessOrNot.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowChannelPeople(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/ShowChannelPeople',
            chatting__pb2.ShowPeopleRequest.SerializeToString,
            chatting__pb2.ChannelPeople.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Chatting/ChatStream',
            chatting__pb2.Empty.SerializeToString,
            chatting__pb2.ChatRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chatting/SendChat',
            chatting__pb2.ChatRequest.SerializeToString,
            chatting__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
